# coding: utf-8

"""
    xata

    xata.io API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from XataClient.api_client import ApiClient


class TableApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_table_column(self, db_branch_name, table_name, **kwargs):  # noqa: E501
        """Creates a new column  # noqa: E501

        Adds a new column to the table. The body of the request should contain the column definition. In the column definition, the 'name' field should contain the full path separated by dots. If the parent objects do not exists, they will be automatically created. For example, passing `\"name\": \"address.city\"` will auto-create the `address` object if it doesn't exist.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_table_column(db_branch_name, table_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :param Column body: The column definition.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.add_table_column_with_http_info(db_branch_name, table_name, **kwargs)  # noqa: E501
        else:
            (data) = self.add_table_column_with_http_info(db_branch_name, table_name, **kwargs)  # noqa: E501
            return data

    def add_table_column_with_http_info(self, db_branch_name, table_name, **kwargs):  # noqa: E501
        """Creates a new column  # noqa: E501

        Adds a new column to the table. The body of the request should contain the column definition. In the column definition, the 'name' field should contain the full path separated by dots. If the parent objects do not exists, they will be automatically created. For example, passing `\"name\": \"address.city\"` will auto-create the `address` object if it doesn't exist.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.add_table_column_with_http_info(db_branch_name, table_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :param Column body: The column definition.
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name', 'table_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_table_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `add_table_column`")  # noqa: E501
        # verify the required parameter 'table_name' is set
        if ('table_name' not in params or
                params['table_name'] is None):
            raise ValueError("Missing the required parameter `table_name` when calling `add_table_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501
        if 'table_name' in params:
            path_params['table_name'] = params['table_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/tables/{table_name}/columns', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_table(self, db_branch_name, table_name, **kwargs):  # noqa: E501
        """Create table  # noqa: E501

        Creates a new table with the given name. Returns 422 if a table with the same name already exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_table(db_branch_name, table_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_table_with_http_info(db_branch_name, table_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_table_with_http_info(db_branch_name, table_name, **kwargs)  # noqa: E501
            return data

    def create_table_with_http_info(self, db_branch_name, table_name, **kwargs):  # noqa: E501
        """Create table  # noqa: E501

        Creates a new table with the given name. Returns 422 if a table with the same name already exists.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_table_with_http_info(db_branch_name, table_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name', 'table_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `create_table`")  # noqa: E501
        # verify the required parameter 'table_name' is set
        if ('table_name' not in params or
                params['table_name'] is None):
            raise ValueError("Missing the required parameter `table_name` when calling `create_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501
        if 'table_name' in params:
            path_params['table_name'] = params['table_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/tables/{table_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_column(self, db_branch_name, table_name, column_name, **kwargs):  # noqa: E501
        """Deletes a column  # noqa: E501

        Deletes the specified column. To refer to sub-objects, the column name can contain dots. For example `address.country`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_column(db_branch_name, table_name, column_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :param ColumnName column_name: The Column name (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_column_with_http_info(db_branch_name, table_name, column_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_column_with_http_info(db_branch_name, table_name, column_name, **kwargs)  # noqa: E501
            return data

    def delete_column_with_http_info(self, db_branch_name, table_name, column_name, **kwargs):  # noqa: E501
        """Deletes a column  # noqa: E501

        Deletes the specified column. To refer to sub-objects, the column name can contain dots. For example `address.country`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_column_with_http_info(db_branch_name, table_name, column_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :param ColumnName column_name: The Column name (required)
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name', 'table_name', 'column_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `delete_column`")  # noqa: E501
        # verify the required parameter 'table_name' is set
        if ('table_name' not in params or
                params['table_name'] is None):
            raise ValueError("Missing the required parameter `table_name` when calling `delete_column`")  # noqa: E501
        # verify the required parameter 'column_name' is set
        if ('column_name' not in params or
                params['column_name'] is None):
            raise ValueError("Missing the required parameter `column_name` when calling `delete_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501
        if 'table_name' in params:
            path_params['table_name'] = params['table_name']  # noqa: E501
        if 'column_name' in params:
            path_params['column_name'] = params['column_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/tables/{table_name}/columns/{column_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_table(self, db_branch_name, table_name, **kwargs):  # noqa: E501
        """Delete table  # noqa: E501

        Deletes the table with the given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_table(db_branch_name, table_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_table_with_http_info(db_branch_name, table_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_table_with_http_info(db_branch_name, table_name, **kwargs)  # noqa: E501
            return data

    def delete_table_with_http_info(self, db_branch_name, table_name, **kwargs):  # noqa: E501
        """Delete table  # noqa: E501

        Deletes the table with the given name.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_table_with_http_info(db_branch_name, table_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name', 'table_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `delete_table`")  # noqa: E501
        # verify the required parameter 'table_name' is set
        if ('table_name' not in params or
                params['table_name'] is None):
            raise ValueError("Missing the required parameter `table_name` when calling `delete_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501
        if 'table_name' in params:
            path_params['table_name'] = params['table_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/tables/{table_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_column(self, db_branch_name, table_name, column_name, **kwargs):  # noqa: E501
        """Get column information  # noqa: E501

        Get the definition of a single column. To refer to sub-objects, the column name can contain dots. For example `address.country`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_column(db_branch_name, table_name, column_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :param ColumnName column_name: The Column name (required)
        :return: Column
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_column_with_http_info(db_branch_name, table_name, column_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_column_with_http_info(db_branch_name, table_name, column_name, **kwargs)  # noqa: E501
            return data

    def get_column_with_http_info(self, db_branch_name, table_name, column_name, **kwargs):  # noqa: E501
        """Get column information  # noqa: E501

        Get the definition of a single column. To refer to sub-objects, the column name can contain dots. For example `address.country`.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_column_with_http_info(db_branch_name, table_name, column_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :param ColumnName column_name: The Column name (required)
        :return: Column
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name', 'table_name', 'column_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `get_column`")  # noqa: E501
        # verify the required parameter 'table_name' is set
        if ('table_name' not in params or
                params['table_name'] is None):
            raise ValueError("Missing the required parameter `table_name` when calling `get_column`")  # noqa: E501
        # verify the required parameter 'column_name' is set
        if ('column_name' not in params or
                params['column_name'] is None):
            raise ValueError("Missing the required parameter `column_name` when calling `get_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501
        if 'table_name' in params:
            path_params['table_name'] = params['table_name']  # noqa: E501
        if 'column_name' in params:
            path_params['column_name'] = params['column_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/tables/{table_name}/columns/{column_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Column',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_table_columns(self, db_branch_name, table_name, **kwargs):  # noqa: E501
        """Get the columns  # noqa: E501

        Retrieves the list of table columns and their definition. This endpoint returns the column list with object columns being reported with their full dot-separated path (flattened).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table_columns(db_branch_name, table_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_table_columns_with_http_info(db_branch_name, table_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_table_columns_with_http_info(db_branch_name, table_name, **kwargs)  # noqa: E501
            return data

    def get_table_columns_with_http_info(self, db_branch_name, table_name, **kwargs):  # noqa: E501
        """Get the columns  # noqa: E501

        Retrieves the list of table columns and their definition. This endpoint returns the column list with object columns being reported with their full dot-separated path (flattened).   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table_columns_with_http_info(db_branch_name, table_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :return: InlineResponse2005
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name', 'table_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_table_columns" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `get_table_columns`")  # noqa: E501
        # verify the required parameter 'table_name' is set
        if ('table_name' not in params or
                params['table_name'] is None):
            raise ValueError("Missing the required parameter `table_name` when calling `get_table_columns`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501
        if 'table_name' in params:
            path_params['table_name'] = params['table_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/tables/{table_name}/columns', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2005',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_table_schema(self, db_branch_name, table_name, **kwargs):  # noqa: E501
        """Get table schema  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table_schema(db_branch_name, table_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_table_schema_with_http_info(db_branch_name, table_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_table_schema_with_http_info(db_branch_name, table_name, **kwargs)  # noqa: E501
            return data

    def get_table_schema_with_http_info(self, db_branch_name, table_name, **kwargs):  # noqa: E501
        """Get table schema  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_table_schema_with_http_info(db_branch_name, table_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :return: InlineResponse2004
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name', 'table_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_table_schema" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `get_table_schema`")  # noqa: E501
        # verify the required parameter 'table_name' is set
        if ('table_name' not in params or
                params['table_name'] is None):
            raise ValueError("Missing the required parameter `table_name` when calling `get_table_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501
        if 'table_name' in params:
            path_params['table_name'] = params['table_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/tables/{table_name}/schema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2004',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_table_schema(self, db_branch_name, table_name, **kwargs):  # noqa: E501
        """Update table schema  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_table_schema(db_branch_name, table_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :param TableNameSchemaBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.set_table_schema_with_http_info(db_branch_name, table_name, **kwargs)  # noqa: E501
        else:
            (data) = self.set_table_schema_with_http_info(db_branch_name, table_name, **kwargs)  # noqa: E501
            return data

    def set_table_schema_with_http_info(self, db_branch_name, table_name, **kwargs):  # noqa: E501
        """Update table schema  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.set_table_schema_with_http_info(db_branch_name, table_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :param TableNameSchemaBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name', 'table_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_table_schema" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `set_table_schema`")  # noqa: E501
        # verify the required parameter 'table_name' is set
        if ('table_name' not in params or
                params['table_name'] is None):
            raise ValueError("Missing the required parameter `table_name` when calling `set_table_schema`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501
        if 'table_name' in params:
            path_params['table_name'] = params['table_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/tables/{table_name}/schema', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_column(self, db_branch_name, table_name, column_name, **kwargs):  # noqa: E501
        """Updates a column  # noqa: E501

        Update column with partial data. Can be used for renaming the column by providing a new \"name\" field. To refer to sub-objects, the column name can contain dots. For example `address.country`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_column(db_branch_name, table_name, column_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :param ColumnName column_name: The Column name (required)
        :param ColumnsColumnNameBody body:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_column_with_http_info(db_branch_name, table_name, column_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_column_with_http_info(db_branch_name, table_name, column_name, **kwargs)  # noqa: E501
            return data

    def update_column_with_http_info(self, db_branch_name, table_name, column_name, **kwargs):  # noqa: E501
        """Updates a column  # noqa: E501

        Update column with partial data. Can be used for renaming the column by providing a new \"name\" field. To refer to sub-objects, the column name can contain dots. For example `address.country`.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_column_with_http_info(db_branch_name, table_name, column_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :param ColumnName column_name: The Column name (required)
        :param ColumnsColumnNameBody body:
        :return: InlineResponse2006
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name', 'table_name', 'column_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_column" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `update_column`")  # noqa: E501
        # verify the required parameter 'table_name' is set
        if ('table_name' not in params or
                params['table_name'] is None):
            raise ValueError("Missing the required parameter `table_name` when calling `update_column`")  # noqa: E501
        # verify the required parameter 'column_name' is set
        if ('column_name' not in params or
                params['column_name'] is None):
            raise ValueError("Missing the required parameter `column_name` when calling `update_column`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501
        if 'table_name' in params:
            path_params['table_name'] = params['table_name']  # noqa: E501
        if 'column_name' in params:
            path_params['column_name'] = params['column_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/tables/{table_name}/columns/{column_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2006',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_table(self, db_branch_name, table_name, **kwargs):  # noqa: E501
        """Update table  # noqa: E501

        Update table. Currently there is only one update operation supported: renaming the table by providing a new name.  In the example below, we rename a table from â€œusersâ€ to â€œpeopleâ€:  ```jsx PATCH /db/test:main/tables/users {   \"name\": \"people\" } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_table(db_branch_name, table_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :param TablesTableNameBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_table_with_http_info(db_branch_name, table_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_table_with_http_info(db_branch_name, table_name, **kwargs)  # noqa: E501
            return data

    def update_table_with_http_info(self, db_branch_name, table_name, **kwargs):  # noqa: E501
        """Update table  # noqa: E501

        Update table. Currently there is only one update operation supported: renaming the table by providing a new name.  In the example below, we rename a table from â€œusersâ€ to â€œpeopleâ€:  ```jsx PATCH /db/test:main/tables/users {   \"name\": \"people\" } ```  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_table_with_http_info(db_branch_name, table_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param TableName table_name: The Table name (required)
        :param TablesTableNameBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name', 'table_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_table" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `update_table`")  # noqa: E501
        # verify the required parameter 'table_name' is set
        if ('table_name' not in params or
                params['table_name'] is None):
            raise ValueError("Missing the required parameter `table_name` when calling `update_table`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501
        if 'table_name' in params:
            path_params['table_name'] = params['table_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/tables/{table_name}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
