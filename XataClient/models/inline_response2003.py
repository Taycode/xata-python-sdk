# coding: utf-8

"""
    xata

    xata.io API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class InlineResponse2003(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'timestamp': 'str',
        'interval': 'str',
        'resolution': 'str',
        'number_of_records': 'list[MetricsDatapoint]',
        'writes_over_time': 'list[MetricsDatapoint]',
        'reads_over_time': 'list[MetricsDatapoint]',
        'read_latency': 'MetricsLatency',
        'write_latency': 'MetricsLatency',
        'warning': 'str'
    }

    attribute_map = {
        'timestamp': 'timestamp',
        'interval': 'interval',
        'resolution': 'resolution',
        'number_of_records': 'numberOfRecords',
        'writes_over_time': 'writesOverTime',
        'reads_over_time': 'readsOverTime',
        'read_latency': 'readLatency',
        'write_latency': 'writeLatency',
        'warning': 'warning'
    }

    def __init__(self, timestamp=None, interval=None, resolution=None, number_of_records=None, writes_over_time=None, reads_over_time=None, read_latency=None, write_latency=None, warning=None):  # noqa: E501
        """InlineResponse2003 - a model defined in Swagger"""  # noqa: E501
        self._timestamp = None
        self._interval = None
        self._resolution = None
        self._number_of_records = None
        self._writes_over_time = None
        self._reads_over_time = None
        self._read_latency = None
        self._write_latency = None
        self._warning = None
        self.discriminator = None
        self.timestamp = timestamp
        self.interval = interval
        self.resolution = resolution
        if number_of_records is not None:
            self.number_of_records = number_of_records
        if writes_over_time is not None:
            self.writes_over_time = writes_over_time
        if reads_over_time is not None:
            self.reads_over_time = reads_over_time
        if read_latency is not None:
            self.read_latency = read_latency
        if write_latency is not None:
            self.write_latency = write_latency
        if warning is not None:
            self.warning = warning

    @property
    def timestamp(self):
        """Gets the timestamp of this InlineResponse2003.  # noqa: E501


        :return: The timestamp of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._timestamp

    @timestamp.setter
    def timestamp(self, timestamp):
        """Sets the timestamp of this InlineResponse2003.


        :param timestamp: The timestamp of this InlineResponse2003.  # noqa: E501
        :type: str
        """
        if timestamp is None:
            raise ValueError("Invalid value for `timestamp`, must not be `None`")  # noqa: E501

        self._timestamp = timestamp

    @property
    def interval(self):
        """Gets the interval of this InlineResponse2003.  # noqa: E501


        :return: The interval of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._interval

    @interval.setter
    def interval(self, interval):
        """Sets the interval of this InlineResponse2003.


        :param interval: The interval of this InlineResponse2003.  # noqa: E501
        :type: str
        """
        if interval is None:
            raise ValueError("Invalid value for `interval`, must not be `None`")  # noqa: E501

        self._interval = interval

    @property
    def resolution(self):
        """Gets the resolution of this InlineResponse2003.  # noqa: E501


        :return: The resolution of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._resolution

    @resolution.setter
    def resolution(self, resolution):
        """Sets the resolution of this InlineResponse2003.


        :param resolution: The resolution of this InlineResponse2003.  # noqa: E501
        :type: str
        """
        if resolution is None:
            raise ValueError("Invalid value for `resolution`, must not be `None`")  # noqa: E501

        self._resolution = resolution

    @property
    def number_of_records(self):
        """Gets the number_of_records of this InlineResponse2003.  # noqa: E501


        :return: The number_of_records of this InlineResponse2003.  # noqa: E501
        :rtype: list[MetricsDatapoint]
        """
        return self._number_of_records

    @number_of_records.setter
    def number_of_records(self, number_of_records):
        """Sets the number_of_records of this InlineResponse2003.


        :param number_of_records: The number_of_records of this InlineResponse2003.  # noqa: E501
        :type: list[MetricsDatapoint]
        """

        self._number_of_records = number_of_records

    @property
    def writes_over_time(self):
        """Gets the writes_over_time of this InlineResponse2003.  # noqa: E501


        :return: The writes_over_time of this InlineResponse2003.  # noqa: E501
        :rtype: list[MetricsDatapoint]
        """
        return self._writes_over_time

    @writes_over_time.setter
    def writes_over_time(self, writes_over_time):
        """Sets the writes_over_time of this InlineResponse2003.


        :param writes_over_time: The writes_over_time of this InlineResponse2003.  # noqa: E501
        :type: list[MetricsDatapoint]
        """

        self._writes_over_time = writes_over_time

    @property
    def reads_over_time(self):
        """Gets the reads_over_time of this InlineResponse2003.  # noqa: E501


        :return: The reads_over_time of this InlineResponse2003.  # noqa: E501
        :rtype: list[MetricsDatapoint]
        """
        return self._reads_over_time

    @reads_over_time.setter
    def reads_over_time(self, reads_over_time):
        """Sets the reads_over_time of this InlineResponse2003.


        :param reads_over_time: The reads_over_time of this InlineResponse2003.  # noqa: E501
        :type: list[MetricsDatapoint]
        """

        self._reads_over_time = reads_over_time

    @property
    def read_latency(self):
        """Gets the read_latency of this InlineResponse2003.  # noqa: E501


        :return: The read_latency of this InlineResponse2003.  # noqa: E501
        :rtype: MetricsLatency
        """
        return self._read_latency

    @read_latency.setter
    def read_latency(self, read_latency):
        """Sets the read_latency of this InlineResponse2003.


        :param read_latency: The read_latency of this InlineResponse2003.  # noqa: E501
        :type: MetricsLatency
        """

        self._read_latency = read_latency

    @property
    def write_latency(self):
        """Gets the write_latency of this InlineResponse2003.  # noqa: E501


        :return: The write_latency of this InlineResponse2003.  # noqa: E501
        :rtype: MetricsLatency
        """
        return self._write_latency

    @write_latency.setter
    def write_latency(self, write_latency):
        """Sets the write_latency of this InlineResponse2003.


        :param write_latency: The write_latency of this InlineResponse2003.  # noqa: E501
        :type: MetricsLatency
        """

        self._write_latency = write_latency

    @property
    def warning(self):
        """Gets the warning of this InlineResponse2003.  # noqa: E501


        :return: The warning of this InlineResponse2003.  # noqa: E501
        :rtype: str
        """
        return self._warning

    @warning.setter
    def warning(self, warning):
        """Sets the warning of this InlineResponse2003.


        :param warning: The warning of this InlineResponse2003.  # noqa: E501
        :type: str
        """

        self._warning = warning

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(InlineResponse2003, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2003):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
