# coding: utf-8

"""
    xata

    xata.io API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class TableMigration(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'new_columns': 'dict(str, Column)',
        'removed_columns': 'list[str]',
        'modified_columns': 'list[ColumnMigration]',
        'new_column_order': 'list[str]'
    }

    attribute_map = {
        'new_columns': 'newColumns',
        'removed_columns': 'removedColumns',
        'modified_columns': 'modifiedColumns',
        'new_column_order': 'newColumnOrder'
    }

    def __init__(self, new_columns=None, removed_columns=None, modified_columns=None, new_column_order=None):  # noqa: E501
        """TableMigration - a model defined in Swagger"""  # noqa: E501
        self._new_columns = None
        self._removed_columns = None
        self._modified_columns = None
        self._new_column_order = None
        self.discriminator = None
        if new_columns is not None:
            self.new_columns = new_columns
        if removed_columns is not None:
            self.removed_columns = removed_columns
        if modified_columns is not None:
            self.modified_columns = modified_columns
        self.new_column_order = new_column_order

    @property
    def new_columns(self):
        """Gets the new_columns of this TableMigration.  # noqa: E501


        :return: The new_columns of this TableMigration.  # noqa: E501
        :rtype: dict(str, Column)
        """
        return self._new_columns

    @new_columns.setter
    def new_columns(self, new_columns):
        """Sets the new_columns of this TableMigration.


        :param new_columns: The new_columns of this TableMigration.  # noqa: E501
        :type: dict(str, Column)
        """

        self._new_columns = new_columns

    @property
    def removed_columns(self):
        """Gets the removed_columns of this TableMigration.  # noqa: E501


        :return: The removed_columns of this TableMigration.  # noqa: E501
        :rtype: list[str]
        """
        return self._removed_columns

    @removed_columns.setter
    def removed_columns(self, removed_columns):
        """Sets the removed_columns of this TableMigration.


        :param removed_columns: The removed_columns of this TableMigration.  # noqa: E501
        :type: list[str]
        """

        self._removed_columns = removed_columns

    @property
    def modified_columns(self):
        """Gets the modified_columns of this TableMigration.  # noqa: E501


        :return: The modified_columns of this TableMigration.  # noqa: E501
        :rtype: list[ColumnMigration]
        """
        return self._modified_columns

    @modified_columns.setter
    def modified_columns(self, modified_columns):
        """Sets the modified_columns of this TableMigration.


        :param modified_columns: The modified_columns of this TableMigration.  # noqa: E501
        :type: list[ColumnMigration]
        """

        self._modified_columns = modified_columns

    @property
    def new_column_order(self):
        """Gets the new_column_order of this TableMigration.  # noqa: E501


        :return: The new_column_order of this TableMigration.  # noqa: E501
        :rtype: list[str]
        """
        return self._new_column_order

    @new_column_order.setter
    def new_column_order(self, new_column_order):
        """Sets the new_column_order of this TableMigration.


        :param new_column_order: The new_column_order of this TableMigration.  # noqa: E501
        :type: list[str]
        """
        if new_column_order is None:
            raise ValueError("Invalid value for `new_column_order`, must not be `None`")  # noqa: E501

        self._new_column_order = new_column_order

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(TableMigration, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TableMigration):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
