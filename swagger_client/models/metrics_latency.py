# coding: utf-8

"""
    xata

    xata.io API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class MetricsLatency(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'p50': 'list[MetricsDatapoint]',
        'p90': 'list[MetricsDatapoint]'
    }

    attribute_map = {
        'p50': 'p50',
        'p90': 'p90'
    }

    def __init__(self, p50=None, p90=None):  # noqa: E501
        """MetricsLatency - a model defined in Swagger"""  # noqa: E501
        self._p50 = None
        self._p90 = None
        self.discriminator = None
        if p50 is not None:
            self.p50 = p50
        if p90 is not None:
            self.p90 = p90

    @property
    def p50(self):
        """Gets the p50 of this MetricsLatency.  # noqa: E501


        :return: The p50 of this MetricsLatency.  # noqa: E501
        :rtype: list[MetricsDatapoint]
        """
        return self._p50

    @p50.setter
    def p50(self, p50):
        """Sets the p50 of this MetricsLatency.


        :param p50: The p50 of this MetricsLatency.  # noqa: E501
        :type: list[MetricsDatapoint]
        """

        self._p50 = p50

    @property
    def p90(self):
        """Gets the p90 of this MetricsLatency.  # noqa: E501


        :return: The p90 of this MetricsLatency.  # noqa: E501
        :rtype: list[MetricsDatapoint]
        """
        return self._p90

    @p90.setter
    def p90(self, p90):
        """Sets the p90 of this MetricsLatency.


        :param p90: The p90 of this MetricsLatency.  # noqa: E501
        :type: list[MetricsDatapoint]
        """

        self._p90 = p90

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(MetricsLatency, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetricsLatency):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
