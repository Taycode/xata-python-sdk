# coding: utf-8

"""
    xata

    xata.io API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class PageConfig(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'after': 'str',
        'before': 'str',
        'first': 'str',
        'last': 'str',
        'size': 'int',
        'offset': 'int'
    }

    attribute_map = {
        'after': 'after',
        'before': 'before',
        'first': 'first',
        'last': 'last',
        'size': 'size',
        'offset': 'offset'
    }

    def __init__(self, after=None, before=None, first=None, last=None, size=20, offset=0):  # noqa: E501
        """PageConfig - a model defined in Swagger"""  # noqa: E501
        self._after = None
        self._before = None
        self._first = None
        self._last = None
        self._size = None
        self._offset = None
        self.discriminator = None
        if after is not None:
            self.after = after
        if before is not None:
            self.before = before
        if first is not None:
            self.first = first
        if last is not None:
            self.last = last
        if size is not None:
            self.size = size
        if offset is not None:
            self.offset = offset

    @property
    def after(self):
        """Gets the after of this PageConfig.  # noqa: E501

        Query the next page that follow the cursor.  # noqa: E501

        :return: The after of this PageConfig.  # noqa: E501
        :rtype: str
        """
        return self._after

    @after.setter
    def after(self, after):
        """Sets the after of this PageConfig.

        Query the next page that follow the cursor.  # noqa: E501

        :param after: The after of this PageConfig.  # noqa: E501
        :type: str
        """

        self._after = after

    @property
    def before(self):
        """Gets the before of this PageConfig.  # noqa: E501

        Query the previous page before the cursor.  # noqa: E501

        :return: The before of this PageConfig.  # noqa: E501
        :rtype: str
        """
        return self._before

    @before.setter
    def before(self, before):
        """Sets the before of this PageConfig.

        Query the previous page before the cursor.  # noqa: E501

        :param before: The before of this PageConfig.  # noqa: E501
        :type: str
        """

        self._before = before

    @property
    def first(self):
        """Gets the first of this PageConfig.  # noqa: E501

        Query the first page from the cursor.  # noqa: E501

        :return: The first of this PageConfig.  # noqa: E501
        :rtype: str
        """
        return self._first

    @first.setter
    def first(self, first):
        """Sets the first of this PageConfig.

        Query the first page from the cursor.  # noqa: E501

        :param first: The first of this PageConfig.  # noqa: E501
        :type: str
        """

        self._first = first

    @property
    def last(self):
        """Gets the last of this PageConfig.  # noqa: E501

        Query the last page from the cursor.  # noqa: E501

        :return: The last of this PageConfig.  # noqa: E501
        :rtype: str
        """
        return self._last

    @last.setter
    def last(self, last):
        """Sets the last of this PageConfig.

        Query the last page from the cursor.  # noqa: E501

        :param last: The last of this PageConfig.  # noqa: E501
        :type: str
        """

        self._last = last

    @property
    def size(self):
        """Gets the size of this PageConfig.  # noqa: E501

        Set page size. If the size is missing it is read from the cursor. If no cursor is given xata will choose the default page size.  # noqa: E501

        :return: The size of this PageConfig.  # noqa: E501
        :rtype: int
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this PageConfig.

        Set page size. If the size is missing it is read from the cursor. If no cursor is given xata will choose the default page size.  # noqa: E501

        :param size: The size of this PageConfig.  # noqa: E501
        :type: int
        """

        self._size = size

    @property
    def offset(self):
        """Gets the offset of this PageConfig.  # noqa: E501

        Use offset to skip entries. To skip pages set offset to a multiple of size.  # noqa: E501

        :return: The offset of this PageConfig.  # noqa: E501
        :rtype: int
        """
        return self._offset

    @offset.setter
    def offset(self, offset):
        """Sets the offset of this PageConfig.

        Use offset to skip entries. To skip pages set offset to a multiple of size.  # noqa: E501

        :param offset: The offset of this PageConfig.  # noqa: E501
        :type: int
        """

        self._offset = offset

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(PageConfig, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PageConfig):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
