# coding: utf-8

"""
    xata

    xata.io API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

import pprint
import re  # noqa: F401

import six

class FilterColumnIncludes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """
    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'includes': 'FilterPredicate',
        'includes_any': 'FilterPredicate',
        'includes_all': 'FilterPredicate',
        'includes_none': 'FilterPredicate'
    }

    attribute_map = {
        'includes': '$includes',
        'includes_any': '$includesAny',
        'includes_all': '$includesAll',
        'includes_none': '$includesNone'
    }

    def __init__(self, includes=None, includes_any=None, includes_all=None, includes_none=None):  # noqa: E501
        """FilterColumnIncludes - a model defined in Swagger"""  # noqa: E501
        self._includes = None
        self._includes_any = None
        self._includes_all = None
        self._includes_none = None
        self.discriminator = None
        if includes is not None:
            self.includes = includes
        if includes_any is not None:
            self.includes_any = includes_any
        if includes_all is not None:
            self.includes_all = includes_all
        if includes_none is not None:
            self.includes_none = includes_none

    @property
    def includes(self):
        """Gets the includes of this FilterColumnIncludes.  # noqa: E501


        :return: The includes of this FilterColumnIncludes.  # noqa: E501
        :rtype: FilterPredicate
        """
        return self._includes

    @includes.setter
    def includes(self, includes):
        """Sets the includes of this FilterColumnIncludes.


        :param includes: The includes of this FilterColumnIncludes.  # noqa: E501
        :type: FilterPredicate
        """

        self._includes = includes

    @property
    def includes_any(self):
        """Gets the includes_any of this FilterColumnIncludes.  # noqa: E501


        :return: The includes_any of this FilterColumnIncludes.  # noqa: E501
        :rtype: FilterPredicate
        """
        return self._includes_any

    @includes_any.setter
    def includes_any(self, includes_any):
        """Sets the includes_any of this FilterColumnIncludes.


        :param includes_any: The includes_any of this FilterColumnIncludes.  # noqa: E501
        :type: FilterPredicate
        """

        self._includes_any = includes_any

    @property
    def includes_all(self):
        """Gets the includes_all of this FilterColumnIncludes.  # noqa: E501


        :return: The includes_all of this FilterColumnIncludes.  # noqa: E501
        :rtype: FilterPredicate
        """
        return self._includes_all

    @includes_all.setter
    def includes_all(self, includes_all):
        """Sets the includes_all of this FilterColumnIncludes.


        :param includes_all: The includes_all of this FilterColumnIncludes.  # noqa: E501
        :type: FilterPredicate
        """

        self._includes_all = includes_all

    @property
    def includes_none(self):
        """Gets the includes_none of this FilterColumnIncludes.  # noqa: E501


        :return: The includes_none of this FilterColumnIncludes.  # noqa: E501
        :rtype: FilterPredicate
        """
        return self._includes_none

    @includes_none.setter
    def includes_none(self, includes_none):
        """Sets the includes_none of this FilterColumnIncludes.


        :param includes_none: The includes_none of this FilterColumnIncludes.  # noqa: E501
        :type: FilterPredicate
        """

        self._includes_none = includes_none

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value
        if issubclass(FilterColumnIncludes, dict):
            for key, value in self.items():
                result[key] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, FilterColumnIncludes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
