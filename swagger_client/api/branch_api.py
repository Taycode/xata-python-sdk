# coding: utf-8

"""
    xata

    xata.io API  # noqa: E501

    OpenAPI spec version: 1.0
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""

from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class BranchApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_branch(self, db_branch_name, **kwargs):  # noqa: E501
        """Create Database branch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_branch(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param DbDbBranchNameBody body:
        :param str _from: Name of source branch to branch the new schema from
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.create_branch_with_http_info(db_branch_name, **kwargs)  # noqa: E501
        else:
            (data) = self.create_branch_with_http_info(db_branch_name, **kwargs)  # noqa: E501
            return data

    def create_branch_with_http_info(self, db_branch_name, **kwargs):  # noqa: E501
        """Create Database branch  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.create_branch_with_http_info(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param DbDbBranchNameBody body:
        :param str _from: Name of source branch to branch the new schema from
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name', 'body', '_from']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_branch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `create_branch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501

        query_params = []
        if '_from' in params:
            query_params.append(('from', params['_from']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_branch(self, db_branch_name, **kwargs):  # noqa: E501
        """Delete Database branch  # noqa: E501

        Delete the branch in the database and all its resources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_branch(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.delete_branch_with_http_info(db_branch_name, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_branch_with_http_info(db_branch_name, **kwargs)  # noqa: E501
            return data

    def delete_branch_with_http_info(self, db_branch_name, **kwargs):  # noqa: E501
        """Delete Database branch  # noqa: E501

        Delete the branch in the database and all its resources  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.delete_branch_with_http_info(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_branch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `delete_branch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def execute_branch_migration_plan(self, db_branch_name, **kwargs):  # noqa: E501
        """Migrate branch  # noqa: E501

        Apply a migration plan to the branch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_branch_migration_plan(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param MigrationsExecuteBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.execute_branch_migration_plan_with_http_info(db_branch_name, **kwargs)  # noqa: E501
        else:
            (data) = self.execute_branch_migration_plan_with_http_info(db_branch_name, **kwargs)  # noqa: E501
            return data

    def execute_branch_migration_plan_with_http_info(self, db_branch_name, **kwargs):  # noqa: E501
        """Migrate branch  # noqa: E501

        Apply a migration plan to the branch  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.execute_branch_migration_plan_with_http_info(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param MigrationsExecuteBody body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method execute_branch_migration_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `execute_branch_migration_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/migrations/execute', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_branch_details(self, db_branch_name, **kwargs):  # noqa: E501
        """Get branch schema and metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_branch_details(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :return: DBBranch
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_branch_details_with_http_info(db_branch_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_branch_details_with_http_info(db_branch_name, **kwargs)  # noqa: E501
            return data

    def get_branch_details_with_http_info(self, db_branch_name, **kwargs):  # noqa: E501
        """Get branch schema and metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_branch_details_with_http_info(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :return: DBBranch
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_branch_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `get_branch_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='DBBranch',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_branch_list(self, db_name, **kwargs):  # noqa: E501
        """List branches  # noqa: E501

        List all available Branches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_branch_list(db_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBName db_name: The Database Name (required)
        :return: ListBranchesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_branch_list_with_http_info(db_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_branch_list_with_http_info(db_name, **kwargs)  # noqa: E501
            return data

    def get_branch_list_with_http_info(self, db_name, **kwargs):  # noqa: E501
        """List branches  # noqa: E501

        List all available Branches  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_branch_list_with_http_info(db_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBName db_name: The Database Name (required)
        :return: ListBranchesResponse
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_branch_list" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_name' is set
        if ('db_name' not in params or
                params['db_name'] is None):
            raise ValueError("Missing the required parameter `db_name` when calling `get_branch_list`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_name' in params:
            path_params['db_name'] = params['db_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/dbs/{db_name}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ListBranchesResponse',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_branch_metadata(self, db_branch_name, **kwargs):  # noqa: E501
        """Get Branch Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_branch_metadata(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :return: BranchMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_branch_metadata_with_http_info(db_branch_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_branch_metadata_with_http_info(db_branch_name, **kwargs)  # noqa: E501
            return data

    def get_branch_metadata_with_http_info(self, db_branch_name, **kwargs):  # noqa: E501
        """Get Branch Metadata  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_branch_metadata_with_http_info(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :return: BranchMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_branch_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `get_branch_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BranchMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_branch_migration_history(self, db_branch_name, **kwargs):  # noqa: E501
        """Get branch migration history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_branch_migration_history(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_branch_migration_history_with_http_info(db_branch_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_branch_migration_history_with_http_info(db_branch_name, **kwargs)  # noqa: E501
            return data

    def get_branch_migration_history_with_http_info(self, db_branch_name, **kwargs):  # noqa: E501
        """Get branch migration history  # noqa: E501

        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_branch_migration_history_with_http_info(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_branch_migration_history" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `get_branch_migration_history`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/migrations', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_branch_migration_plan(self, db_branch_name, **kwargs):  # noqa: E501
        """Compute migration plan  # noqa: E501

        Compute a migration plan from a target schema the branch should be migrated too.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_branch_migration_plan(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param Schema body:
        :return: MigrationsExecuteBody
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_branch_migration_plan_with_http_info(db_branch_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_branch_migration_plan_with_http_info(db_branch_name, **kwargs)  # noqa: E501
            return data

    def get_branch_migration_plan_with_http_info(self, db_branch_name, **kwargs):  # noqa: E501
        """Compute migration plan  # noqa: E501

        Compute a migration plan from a target schema the branch should be migrated too.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_branch_migration_plan_with_http_info(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param Schema body:
        :return: MigrationsExecuteBody
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_branch_migration_plan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `get_branch_migration_plan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/migrations/plan', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='MigrationsExecuteBody',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_branch_stats(self, db_branch_name, **kwargs):  # noqa: E501
        """Branch stats  # noqa: E501

        Get branch usage metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_branch_stats(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.get_branch_stats_with_http_info(db_branch_name, **kwargs)  # noqa: E501
        else:
            (data) = self.get_branch_stats_with_http_info(db_branch_name, **kwargs)  # noqa: E501
            return data

    def get_branch_stats_with_http_info(self, db_branch_name, **kwargs):  # noqa: E501
        """Branch stats  # noqa: E501

        Get branch usage metrics.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.get_branch_stats_with_http_info(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :return: InlineResponse2003
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_branch_stats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `get_branch_stats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/stats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2003',  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_branch_metadata(self, db_branch_name, **kwargs):  # noqa: E501
        """Update branch metadata  # noqa: E501

        Update the branch metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_branch_metadata(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param BranchMetadata body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async_req'):
            return self.update_branch_metadata_with_http_info(db_branch_name, **kwargs)  # noqa: E501
        else:
            (data) = self.update_branch_metadata_with_http_info(db_branch_name, **kwargs)  # noqa: E501
            return data

    def update_branch_metadata_with_http_info(self, db_branch_name, **kwargs):  # noqa: E501
        """Update branch metadata  # noqa: E501

        Update the branch metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async_req=True
        >>> thread = api.update_branch_metadata_with_http_info(db_branch_name, async_req=True)
        >>> result = thread.get()

        :param async_req bool
        :param DBBranchName db_branch_name: The DBBranchName matches the pattern `{db_name}:{branch_name}`.  (required)
        :param BranchMetadata body:
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['db_branch_name', 'body']  # noqa: E501
        all_params.append('async_req')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_branch_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'db_branch_name' is set
        if ('db_branch_name' not in params or
                params['db_branch_name'] is None):
            raise ValueError("Missing the required parameter `db_branch_name` when calling `update_branch_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'db_branch_name' in params:
            path_params['db_branch_name'] = params['db_branch_name']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['bearerAuth']  # noqa: E501

        return self.api_client.call_api(
            '/db/{db_branch_name}/metadata', 'PUT',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async_req=params.get('async_req'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
